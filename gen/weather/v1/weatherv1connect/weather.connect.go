// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: weather/v1/weather.proto

package weatherv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/danny-yamamoto/go-connect-greet/gen/weather/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// WeatherServiceName is the fully-qualified name of the WeatherService service.
	WeatherServiceName = "weather.v1.WeatherService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WeatherServiceWeatherProcedure is the fully-qualified name of the WeatherService's Weather RPC.
	WeatherServiceWeatherProcedure = "/weather.v1.WeatherService/Weather"
)

// WeatherServiceClient is a client for the weather.v1.WeatherService service.
type WeatherServiceClient interface {
	Weather(context.Context, *connect.Request[v1.WeatherRequest]) (*connect.Response[v1.WeatherResponse], error)
}

// NewWeatherServiceClient constructs a client for the weather.v1.WeatherService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWeatherServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) WeatherServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &weatherServiceClient{
		weather: connect.NewClient[v1.WeatherRequest, v1.WeatherResponse](
			httpClient,
			baseURL+WeatherServiceWeatherProcedure,
			opts...,
		),
	}
}

// weatherServiceClient implements WeatherServiceClient.
type weatherServiceClient struct {
	weather *connect.Client[v1.WeatherRequest, v1.WeatherResponse]
}

// Weather calls weather.v1.WeatherService.Weather.
func (c *weatherServiceClient) Weather(ctx context.Context, req *connect.Request[v1.WeatherRequest]) (*connect.Response[v1.WeatherResponse], error) {
	return c.weather.CallUnary(ctx, req)
}

// WeatherServiceHandler is an implementation of the weather.v1.WeatherService service.
type WeatherServiceHandler interface {
	Weather(context.Context, *connect.Request[v1.WeatherRequest]) (*connect.Response[v1.WeatherResponse], error)
}

// NewWeatherServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWeatherServiceHandler(svc WeatherServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	weatherServiceWeatherHandler := connect.NewUnaryHandler(
		WeatherServiceWeatherProcedure,
		svc.Weather,
		opts...,
	)
	return "/weather.v1.WeatherService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WeatherServiceWeatherProcedure:
			weatherServiceWeatherHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWeatherServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWeatherServiceHandler struct{}

func (UnimplementedWeatherServiceHandler) Weather(context.Context, *connect.Request[v1.WeatherRequest]) (*connect.Response[v1.WeatherResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("weather.v1.WeatherService.Weather is not implemented"))
}
